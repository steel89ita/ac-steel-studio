


-- get CSP version
__CSP_version = 0
if ac['getPatchVersionCode'] ~= nil then __CSP_version = ac.getPatchVersionCode() end

ac.debug("Test")

ac.debug("encrypted key", web.encryptKey("Test123"))



local colorControllers = {
    {
        meshNames = {"Plane.001"},
        color = rgb(50, 240, 240),
        texture = 'txDiffuse',
        label = 'Color Controller 1'
    },
    {
        meshNames = {"mesh2"},
        color = rgb(50, 240, 240),
        texture = 'txDiffuse',
        label = 'Color Controller 2'
    },
    {
        meshNames = {"Light_Top_SUB0"},
        color = rgb(50, 240, 240),
        texture = 'txDiffuse',
        label = 'Color Controller 3'
    }
}

local light = ac.LightSource(ac.LightType.Regular, vec3(2,2,2))
light.position = vec3(-3.077, 1.475, -10.197)
light.direction = vec3(0, 0, 1)
light.spot = 0
light.spotSharpness = 0.99
light.color = colorControllers[0].color
light.range = 10
light.shadows = true
light.fadeAt = 500
light.fadeSmooth = 200



local carName = ac.getCarName(0)
local currentSkin = ac.getCarSkinID(0)

ac.debug("car name", carName)
ac.debug("car skin", currentSkin)

local currentSkinPath = "content/cars/" .. carName .. "/skins/" .. currentSkin .. "/_preview.dds"
ac.debug("current skin path", currentSkinPath)

local meshes = ac.findMeshes('carsRoot:yes')
for i, mesh in ipairs(meshes) do
    ac.debug("mesh" .. i, mesh.name)
end

-- Use the Assetto Corsa Lua API to get the texture object for the current skin


function get__dirname()
    if ac.dirname then
        return ac.dirname()
    else
        return "assettocorsa\\extension\\weather\\pure"
    end
end

__SteelStudio_path = ac.dirname()


local function Main()
    
    ui.text('TAB 1')
    ui.text('physics late: '..ac.getSim().physicsLate)
    ui.text('CPU occupancy: '..ac.getSim().cpuOccupancy)
    ui.text('CPU time: '..ac.getSim().cpuTime)
    
    ui.text(string.format('Pure config v%.2f, Parameters: %.0f, CSP: %s', version, pureConfigUI.connectCount, ac.getPatchVersion()))
    ui.separator()
end

local function newColorController(id, label, color, meshName, texture)
    local window = ui.childWindow(id, vec2(ui.availableSpaceX(), 100), function()
        ui.offsetCursorY(30)

        ui.columns(3, true, "cols")

        ui.text(label)

        ui.nextColumn()
		
		 ac.debug("id", id)
		 ac.debug("label", label)
		 ac.debug("color", color)
		 ac.debug("meshNames", meshName)
		 ac.debug("texture", texture)

        if meshName == nil then
            meshName = ""
        end
        meshName = ui.inputText('Mesh:', meshName)

        local meshes = ac.findMeshes(meshName)
        if type(meshes) == "table" then
            for _, mesh in ipairs(meshes) do
                mesh:setMaterialTexture(texture, color:rgbm(1))
            end
        elseif meshes then
            meshes:setMaterialTexture(texture, color:rgbm(1))
        end

        ui.nextColumn()

        if meshName ~= "" then
            ui.colorButton(label, color,
                ui.ColorPickerFlags.PickerHueBar + ui.ColorPickerFlags.NoAlpha + ui.ColorPickerFlags.NoSidePreview)
        else
            ui.text("Enter mesh name to enable color picker")
        end

        ui.nextColumn()


        ui.offsetCursorY(40)
    end)
    return window
end



function addColorController()
    table.insert(colorControllers, {
        id = #colorControllers + 1,
        label = "Color Controller " .. #colorControllers + 1,
        color = rgb(50, 240, 240),
        meshName = "",
        texture = 'txDiffuse'
    })
end

function removeColorController(id)
    for i, controller in ipairs(colorControllers) do
        if controller.id == id then
            table.remove(colorControllers, i)
            break
        end
    end
end

function windowMain(dt)

    ac.debug("studio_color", studio_color_new)
	
	--ui.text("TESTO DI PROVA")
	ui.separator()
    
	for i, controller in ipairs(colorControllers) do
	
        local window = newColorController("colorController" .. i, controller.label, controller.color, controller.meshNames, controller.texture)
        if ui.button("Remove " .. controller.label) then
            removeColorController(controller.id)
        end
    end

    if ui.button("Add Color Controller") then
        addColorController()
    end
	
    --local myText = ui.inputText('Enter something:', myText)
	
	
    if ui.button("Add Color Controller") then
        addColorController()
    end
	
	
    
    --newColorController("idcolor1", "Color 1", color1, "mesh1", 'txDiffuse')

    --newColorController("idcolor2", "Color 2", color2, "mesh2", 'txDiffuse')
	
    --newColorController("idcolor3", "Color 3", color3, mesh3, 'txDiffuse')
	

end